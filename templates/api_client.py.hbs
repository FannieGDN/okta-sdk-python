"""
 THIS FILE IS AUTO GENERATED - SEE CONTRIBUTOR DOCUMENTATION
"""
import requests
import os
from .shared.okta_utils import Utils
from .shared.collection import Collection
from .shared.http import Http
from .models import *


class Client:

    USER_AGENT = Utils.get_okta_user_agent()

    def __init__(self, **kwargs):
        
        # Set configuration values from kwargs
        if kwargs:
            self.__dict__.update(kwargs)
        else:
            # Default
            self.__dict__.update(
                {
                    'orgUrl': None,
                    'token': None,
                    'headers': None
                }
            )
        
        for key, value in self.__dict__.items():
            # Verify each attr is set
            if value is None:
                # Get environment or yaml config
                setattr(self, key, Utils.get_config(key))

        # Set Authorization and User-Agent Header
        try:
            getattr(self, "headers")
            # Set default header, unless overriden
            self.headers['Authorization'] = self.headers.get(
                'Authorization',
                'SSWS {}'.format(self.token)
            )
            self.headers['User-Agent'] = self.headers.get(
                'User-Agent',
                self.USER_AGENT
            )
        except AttributeError:
            # Set default headers
            self.headers = {
                'Authorization': 'SSWS {}'.format(self.token),
                'User-Agent': self.USER_AGENT
            }
        self.http = Http(self.headers)

    {{#each operations}}
    def {{snakeCase operationId}}({{{operationArgumentBuilder this}}}):
        {{# if description}}
        """
        {{{description}}}
        """
        {{/if}}
        url = self.orgUrl + "{{replacePathParams path}}"{{retrievePathParams path}}
        {{#if queryParams.length}}
        url += Utils.build_query_params(**kwargs)
        {{/if}}
        {{# if isArray}}
        return Collection(self, url, {{responseModel}})
        {{else}}
        {{#if (eq method 'delete')}}
        r = self.http.delete(url)
        {{/if}}
        {{#if (eq method 'get')}}
        r = self.http.get(url)
        {{/if}}
        {{#if (eq method 'post')}}
        {{#if bodyModel}}
        r = self.http.post(url, data=Utils.to_json({{snakeCase bodyModel}}))
        {{else}}
        r = self.http.post(url)
        {{/if}}
        {{/if}}
        {{#if (eq method 'put')}}
        {{#if bodyModel}}
        r = self.http.put(url, data=Utils.to_json({{snakeCase bodyModel}}))
        {{else}}
        r = self.http.put(url)
        {{/if}}
        {{/if}}
        {{#if responseModel}}
        return {{responseModel}}(Utils.validate_response(r), self)
        {{else}}
        return r
        {{/if}}
        {{/if}}

        {{/each}}